basePath: /
definitions:
  models.AuthToken:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  models.ConfigFormatted:
    properties:
      key:
        type: string
      type:
        type: string
      value: {}
    type: object
  models.ConfigInput:
    properties:
      key:
        type: string
      type:
        type: string
      value: {}
    type: object
  models.ConfigUpdate:
    properties:
      type:
        type: string
      value: {}
    type: object
  models.ExampleGetConfig:
    properties:
      config:
        $ref: '#/definitions/models.ConfigFormatted'
      success:
        type: boolean
    type: object
  models.ExampleGetConfigs:
    properties:
      config:
        items:
          $ref: '#/definitions/models.ConfigFormatted'
        type: array
      success:
        type: boolean
    type: object
  models.ExampleSuccessConfig:
    properties:
      success:
        type: boolean
    type: object
  models.GetConfigsByKey:
    properties:
      keys:
        example:
        - co:test
        - co:array
        - co:json
        items:
          type: string
        type: array
    type: object
  models.LoginInput:
    properties:
      identity:
        type: string
      password:
        type: string
    type: object
info:
  contact:
    email: erdemkosk@gmail.com
    name: Mustafa Erdem Köşk
  description: Swagger structure prepared for config service
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Config Service
  version: 1.0.0
paths:
  /api/config/:
    get:
      consumes:
      - application/json
      description: Get configs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExampleGetConfigs'
      security:
      - Authorization: []
      summary: Get configs
      tags:
      - config
    post:
      consumes:
      - application/json
      description: Create config with using key type
      parameters:
      - description: Config Value
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ConfigInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExampleSuccessConfig'
      security:
      - Authorization: []
      summary: Create config with using key and type
      tags:
      - config
  /api/config/{key}:
    delete:
      consumes:
      - application/json
      description: Delete config with using key
      parameters:
      - description: Config key value
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExampleSuccessConfig'
      security:
      - Authorization: []
      summary: Delete config with using key
      tags:
      - config
    get:
      consumes:
      - application/json
      description: Get config with using key
      parameters:
      - description: Config key value
        in: path
        name: key
        required: true
        type: string
      - description: type
        enum:
        - Array
        - Boolean
        - Object
        - String
        - Number
        in: query
        name: types
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExampleGetConfig'
      security:
      - Authorization: []
      summary: Get config with using key
      tags:
      - config
    put:
      consumes:
      - application/json
      description: Update config with using key
      parameters:
      - description: Config key value
        in: path
        name: key
        required: true
        type: string
      - description: Config Value
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ConfigUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExampleSuccessConfig'
      security:
      - Authorization: []
      summary: Update config with using key
      tags:
      - config
  /api/config/by-keys:
    post:
      consumes:
      - application/json
      description: Get config with using keys
      parameters:
      - description: Config Keys
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.GetConfigsByKey'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExampleGetConfigs'
      security:
      - Authorization: []
      summary: Get config with using keys
      tags:
      - config
  /auth/login:
    post:
      consumes:
      - application/json
      description: Get config with using key
      parameters:
      - description: Cridentinials
        in: body
        name: cridentinials
        required: true
        schema:
          $ref: '#/definitions/models.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthToken'
      summary: Post config with using key
      tags:
      - auth
securityDefinitions:
  Authorization:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
